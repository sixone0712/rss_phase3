plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    // Build War
    id 'war'
    // UnitTest
    //id 'jacoco'
}

group = 'jp.co.canon.cks.eec.fs'
sourceCompatibility = '1.8'

String git_rev = 'git rev-parse --verify --long HEAD'.execute().text.trim()

allprojects {
    version '2.1.1'
}

String versionStr = project.version

// Build War
bootWar {
    archiveBaseName = 'rss'
    archiveFileName = 'rss.war'
    archiveVersion = project.version
    manifest {
        attributes("Implementation-Version": project.version)
        attributes("Rapid-Collector-Version": project.version)
        attributes("GIT-REV": git_rev)
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation project(':fileservicecommon')
    implementation project(':fileservicecommonweb')
    //compileOnly 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    // Build War
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')

    // Build Jar
    //compile 'org.apache.tomcat.embed:tomcat-embed-jasper'
    compile 'javax.servlet:jstl'

    // Dummy
    compile fileTree(dir: './src/libs', include: ['*.jar'])

    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.12'
    compile group: 'org.mybatis', name: 'mybatis', version: '3.5.4'
    compile group: 'org.mybatis', name: 'mybatis-spring', version: '2.0.4'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '2.2.6.RELEASE'

    // Sql logging
    compile group: 'log4j', name: 'log4j', version: '1.2.17'

    // XML to Json Parsing
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13'
    compile group: 'org.json', name: 'json', version: '20190722'
    compile group: 'org.apache.directory.studio', name: 'org.apache.commons.io', version: '2.4'

    implementation 'com.google.code.gson:gson:2.8.6'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.1'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
}

// UnitTest
/*
test {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    dependsOn test
    
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false

        html.destination file("$buildDir/jacocoHtml")
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(
                dir: it,
                exclude: [
                    "jp/co/canon/cks/eec/fs/manage/**",
                    "jp/co/canon/cks/eec/fs/portal/**",
                    "jp/co/canon/cks/eec/util/ftp/**",
                ])
        })
    }
}
*/

task yarn_install_rss(type:Exec){
    workingDir "src/main/webbuild"
    commandLine 'cmd', '/c', 'yarn install'
}

task yarn_update_env(){
    doLast {
        new File("src/main/webbuild", ".env").text="RSS_VERSION = V"+versionStr
    }
}

task yarn_delete_node_module_ie11_relate_dir(type:Delete, dependsOn: [
        'yarn_install_rss'
]) {
    delete "src/main/webbuild/node_modules/rc-datetime-picker"
    delete "src/main/webbuild/node_modules/react-spinners"
}

task yarn_copy_node_module_ie11_files(dependsOn: [
        'yarn_delete_node_module_ie11_relate_dir'
]){
    doLast {
        copy {
            from {
                zipTree("IE11.zip")
            }
            into "src/main/webbuild/node_modules"
        }
    }
}

task yarn_build_rss(type:Exec, dependsOn: [
        'yarn_update_env',
        'yarn_copy_node_module_ie11_files'
]){
    workingDir "src/main/webbuild"
    commandLine 'cmd', "/c", "yarn build"
}

task distribution_build_all(dependsOn: [
        'clean',
        'bootWar',
        ':fileservicecollect:bootWar',
        ':fileservicemanage:bootWar',
        ':servicemanager:bootWar',
        ':logfilecollectcommand:jar',
]) {
    bootWar.mustRunAfter('clean')
}

task distribution_copyfiles(type:Copy, dependsOn: [
        distribution_build_all
]) {
    from "build/libs/rss.war"
    from "fileservicecollect/build/libs/fsc.war"
    from "fileservicemanage/build/libs/fsm.war"
    from "logfilecollectcommand/build/libs/ELogCollector.jar"
    from "servicemanager/build/libs/servicemanager.war"
    into "docker/build"
}

task prepare(dependsOn:[
        'yarn_build_rss',
        ':servicemanager:prepare'
]) {
    doFirst {
        print("prepare:doFirst")
    }
    doLast {
        print("prepare:doLast")
    }
}

task release(dependsOn: [
        'distribution_copyfiles'
]) {
    compileJava.dependsOn("prepare")
}

task build_docker(type:Exec, dependsOn: [
        'release'
]) {
    workingDir "docker/build"
    commandLine 'cmd', '/c', 'build_and_save.bat', versionStr
}

task release_setup_copy_files(dependsOn: [
    'build_docker'
]){
    doLast {
        println("copy zip files")
        copy {
            from "docker/tar/rss_images_"+versionStr+".tar.gz"
            into "setup_RSS_Release"
        }
        println("create version.txt")
        new File("setup_RSS_Release", "version.txt").text=versionStr
    }
}

task release_setup_zip_directories(type:Zip, dependsOn: [
        'release_setup_copy_files'
]){
    archiveFileName = "setup_Rapid_Collector_Ver_"+versionStr.replace('.', '_')+".zip"
    destinationDirectory = file(".")

    from "./setup_RSS_Release"
    into "setup_Rapid_Collector_Ver_"+versionStr.replace('.', '_')

    doFirst {
        println("zip start")
    }
    doLast {
        println("zip end")
    }
}

task release_setup(dependsOn: ['release_setup_zip_directories']){
}
